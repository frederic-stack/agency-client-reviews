
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.8.2
 * Query Engine version: 2060c79ba17c6bb9f5823312b6f6b7f4a845738e
 */
Prisma.prismaVersion = {
  client: "6.8.2",
  engine: "2060c79ba17c6bb9f5823312b6f6b7f4a845738e"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  passwordHash: 'passwordHash',
  isVerified: 'isVerified',
  verificationToken: 'verificationToken',
  resetToken: 'resetToken',
  resetTokenExpiry: 'resetTokenExpiry',
  companyName: 'companyName',
  websiteUrl: 'websiteUrl',
  industry: 'industry',
  country: 'country',
  linkedinProfile: 'linkedinProfile',
  isActive: 'isActive',
  isSuspended: 'isSuspended',
  suspensionReason: 'suspensionReason',
  membershipTier: 'membershipTier',
  membershipExpiry: 'membershipExpiry',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  lastLoginAt: 'lastLoginAt'
};

exports.Prisma.ClientScalarFieldEnum = {
  id: 'id',
  name: 'name',
  website: 'website',
  industry: 'industry',
  country: 'country',
  description: 'description',
  averageRating: 'averageRating',
  totalReviews: 'totalReviews',
  paymentRating: 'paymentRating',
  communicationRating: 'communicationRating',
  scopeRating: 'scopeRating',
  creativeFreedomRating: 'creativeFreedomRating',
  timelinessRating: 'timelinessRating',
  ongoingProjects: 'ongoingProjects',
  completedProjects: 'completedProjects',
  canceledProjects: 'canceledProjects',
  flagCount: 'flagCount',
  isWatched: 'isWatched',
  watchReason: 'watchReason',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ReviewScalarFieldEnum = {
  id: 'id',
  anonymousId: 'anonymousId',
  title: 'title',
  content: 'content',
  projectType: 'projectType',
  budgetRange: 'budgetRange',
  overallRating: 'overallRating',
  paymentRating: 'paymentRating',
  communicationRating: 'communicationRating',
  scopeRating: 'scopeRating',
  creativeFreedomRating: 'creativeFreedomRating',
  timelinessRating: 'timelinessRating',
  projectStatus: 'projectStatus',
  isPublic: 'isPublic',
  isModerated: 'isModerated',
  moderationStatus: 'moderationStatus',
  moderationNotes: 'moderationNotes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId',
  clientId: 'clientId'
};

exports.Prisma.BookmarkScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  clientId: 'clientId',
  createdAt: 'createdAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  title: 'title',
  message: 'message',
  isRead: 'isRead',
  metadata: 'metadata',
  createdAt: 'createdAt'
};

exports.Prisma.ModerationReportScalarFieldEnum = {
  id: 'id',
  reportedBy: 'reportedBy',
  moderatedBy: 'moderatedBy',
  reviewId: 'reviewId',
  reason: 'reason',
  description: 'description',
  status: 'status',
  action: 'action',
  actionReason: 'actionReason',
  createdAt: 'createdAt',
  resolvedAt: 'resolvedAt'
};

exports.Prisma.AuditLogScalarFieldEnum = {
  id: 'id',
  action: 'action',
  entityType: 'entityType',
  entityId: 'entityId',
  userId: 'userId',
  metadata: 'metadata',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.MembershipTier = exports.$Enums.MembershipTier = {
  FREE: 'FREE',
  PRO: 'PRO'
};

exports.BudgetRange = exports.$Enums.BudgetRange = {
  UNDER_5K: 'UNDER_5K',
  FIVE_TO_15K: 'FIVE_TO_15K',
  FIFTEEN_TO_50K: 'FIFTEEN_TO_50K',
  FIFTY_TO_100K: 'FIFTY_TO_100K',
  OVER_100K: 'OVER_100K'
};

exports.ProjectStatus = exports.$Enums.ProjectStatus = {
  ONGOING: 'ONGOING',
  COMPLETED: 'COMPLETED',
  CANCELED: 'CANCELED'
};

exports.ModerationStatus = exports.$Enums.ModerationStatus = {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED',
  FLAGGED: 'FLAGGED'
};

exports.NotificationType = exports.$Enums.NotificationType = {
  REVIEW_FLAGGED: 'REVIEW_FLAGGED',
  CLIENT_WATCHED: 'CLIENT_WATCHED',
  SYSTEM_ALERT: 'SYSTEM_ALERT',
  MEMBERSHIP_EXPIRY: 'MEMBERSHIP_EXPIRY'
};

exports.ReportReason = exports.$Enums.ReportReason = {
  INAPPROPRIATE_CONTENT: 'INAPPROPRIATE_CONTENT',
  FALSE_INFORMATION: 'FALSE_INFORMATION',
  SPAM: 'SPAM',
  DEFAMATORY: 'DEFAMATORY',
  VIOLATION_OF_TERMS: 'VIOLATION_OF_TERMS',
  OTHER: 'OTHER'
};

exports.ModerationAction = exports.$Enums.ModerationAction = {
  APPROVED: 'APPROVED',
  CONTENT_EDITED: 'CONTENT_EDITED',
  REVIEW_HIDDEN: 'REVIEW_HIDDEN',
  USER_WARNING: 'USER_WARNING',
  USER_SUSPENDED: 'USER_SUSPENDED',
  NO_ACTION: 'NO_ACTION'
};

exports.Prisma.ModelName = {
  User: 'User',
  Client: 'Client',
  Review: 'Review',
  Bookmark: 'Bookmark',
  Notification: 'Notification',
  ModerationReport: 'ModerationReport',
  AuditLog: 'AuditLog'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
