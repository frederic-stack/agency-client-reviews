version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: clientscore-postgres
    environment:
      POSTGRES_DB: clientscore
      POSTGRES_USER: clientscore_user
      POSTGRES_PASSWORD: clientscore_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - clientscore-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U clientscore_user -d clientscore"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: clientscore-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - clientscore-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API Server
  api:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: clientscore-api
    environment:
      NODE_ENV: development
      PORT: 5000
      DATABASE_URL: postgresql://clientscore_user:clientscore_password@postgres:5432/clientscore?schema=public
      REDIS_URL: redis://redis:6379
      JWT_SECRET: your-super-secret-jwt-key-change-this-in-production
      JWT_REFRESH_SECRET: your-super-secret-refresh-key-change-this-in-production
      SESSION_SECRET: your-super-secret-session-key-change-this-in-production
      CORS_ORIGIN: http://localhost:3000
      GOOGLE_CLIENT_ID: your-google-oauth-client-id
      GOOGLE_CLIENT_SECRET: your-google-oauth-client-secret
      LINKEDIN_CLIENT_ID: your-linkedin-oauth-client-id
      LINKEDIN_CLIENT_SECRET: your-linkedin-oauth-client-secret
      SMTP_HOST: smtp.gmail.com
      SMTP_PORT: 587
      SMTP_USER: your-email@gmail.com
      SMTP_PASS: your-app-password
      FROM_EMAIL: noreply@clientscore.com
      AKISMET_API_KEY: your-akismet-api-key
      AKISMET_BLOG_URL: https://clientscore.com
    ports:
      - "5000:5000"
    volumes:
      - ./server:/app
      - /app/node_modules
    networks:
      - clientscore-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend Client Application
  client:
    build:
      context: ./client
      dockerfile: Dockerfile
    container_name: clientscore-client
    environment:
      NODE_ENV: development
      NEXT_PUBLIC_API_URL: http://localhost:5000/api
      NEXT_PUBLIC_CLIENT_URL: http://localhost:3000
    ports:
      - "3000:3000"
    volumes:
      - ./client:/app
      - /app/node_modules
      - /app/.next
    networks:
      - clientscore-network
    depends_on:
      - api
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy (Optional for production)
  nginx:
    image: nginx:alpine
    container_name: clientscore-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/ssl:/etc/nginx/ssl
    networks:
      - clientscore-network
    depends_on:
      - client
      - api
    profiles:
      - production

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  clientscore-network:
    driver: bridge
